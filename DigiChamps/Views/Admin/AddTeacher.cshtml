@model DigiChamps.Models.DigiChampsModel.DigiChampsTeacherRegModel
@{
    ViewBag.Title = "Teacher Registration";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<link href="~/css/croppie.css" rel="stylesheet" />
<link href="~/Student_assets/assets/css/sweet-alerts/sweetalert.css" rel="stylesheet" />
<style>
    .upload-demo .upload-demo-wrap,
    .upload-demo .upload-result,
    .upload-demo.ready .upload-msg {
        display: none;
    }

    .upload-demo.ready .upload-demo-wrap {
        display: block;
    }

    .upload-demo.ready .upload-result {
        display: inline-block;
    }

    .upload-demo-wrap {
        width: 300px;
        height: 300px;
        margin: 0 auto;
    }

    .upload-msg {
        text-align: center;
        padding: 50px;
        font-size: 22px;
        color: #aaa;
        width: 260px;
        margin: 50px auto;
        border: 1px solid #aaa;
    }

    .grid {
        width: 100%;
        max-width: 1140px;
        min-width: 755px;
        margin: 0 auto;
        overflow: hidden;
    }

        .grid:after {
            content: "";
            display: table;
            clear: both;
        }
</style>
@using (Html.BeginForm("TeacherRegistration", "Admin", FormMethod.Post, new { @class = "form-horizontal", enctype = "multipart/form-data", @id = "validation-form" }))
{
    @Html.AntiForgeryToken();
    <div class="page-content-wrap">

        <div class="row">
            <div class="col-md-12">
                <div class="box">
                    <div class="box-title">
                        <h3><i class="fa fa-file"></i> Teacher Registration</h3>
                        <input type="hidden" id="teacher_id" name="id" value="@ViewBag.Teach_ID" />
                    </div>
                    <div class="box-content">

                        <div class="form-group voffset3">
                            <label for="textfield5" class="col-sm-3 col-lg-2 control-label">Teacher's Name<span class="asterisk">*</span></label>
                            <div class="col-sm-9 col-lg-7 controls">
                                @Html.TextBoxFor(m => m.Teacher_Name, new { @class = "form-control", data_rule_required = "true", data_msg_required = "Please enter teacher's name" })
                                @Html.ValidationMessageFor(x => x.Teacher_Name)
                            </div>

                        </div>
                        <div class="form-group">
                            <label for="textfield5" class="col-sm-3 col-lg-2 control-label">Designation<span class="asterisk">*</span></label>
                            <div class="col-sm-9 col-lg-7 controls">
                                @Html.TextBoxFor(m => m.Designation, new { @class = "form-control", data_rule_required = "true", data_msg_required = "Please enter designation" })
                                @Html.ValidationMessageFor(x => x.Designation)
                            </div>
                        </div>
                        <div class="form-group input-cont">
                            <label for="textfield5" class="col-sm-3 col-lg-2 control-label">Gender<span class="asterisk">*</span></label>
                            <div class="col-sm-9 col-lg-7 controls">
                                @Html.DropDownList("Gender", new List<SelectListItem> { new SelectListItem { Text = "Male", Value = "Male" }, new SelectListItem { Text = "Female", Value = "Female" } }, " Select ", new { @class = "form-control", data_rule_required = "true", data_msg_required = "Please select gender" })
                                @Html.ValidationMessageFor(x => x.Gender)
                            </div>
                        </div>
                        <div class="form-group input-cont">
                            <label for="textfield5" class="col-sm-3 col-lg-2 control-label">Date Of Birth<span class="asterisk">*</span></label>
                            <div class="col-sm-9 col-lg-7 controls">
                                @Html.TextBoxFor(m => m.DateOfBirth, new { @class = "form-control datepicker", autocomplete = "off", data_rule_required = "true", data_rule_date = "true", data_msg_required = "Please select date of birth" })
                                @Html.ValidationMessageFor(x => x.DateOfBirth)
                            </div>
                        </div>
                        <div class="form-group input-cont">
                            <label for="textfield5" class="col-sm-3 col-lg-2 control-label">Email Id<span class="asterisk">*</span></label>
                            <div class="col-sm-9 col-lg-7 controls">
                                @Html.TextBoxFor(m => m.Email_ID, new { @class = "form-control", type = "email", data_rule_required = "true", data_rule_email = "true", data_msg_required = "Please enter email id" })
                                @Html.ValidationMessageFor(x => x.Email_ID)
                            </div>
                        </div>

                        <div class="form-group input-cont">
                            <label for="textarea5" class="col-sm-3 col-lg-2 control-label">Mobile Number<span class="asterisk">*</span></label>
                            <div class="col-sm-9 col-lg-7 controls">
                                @Html.TextBoxFor(m => m.Mobile, new { @class = "form-control", maxlength = "10", data_rule_required = "true", data_rule_digits = "true", data_msg_required = "Please enter mobile number" })
                                @Html.ValidationMessageFor(x => x.Mobile)
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="textarea5" class="col-sm-3 col-lg-2 control-label">Address</label>
                            <div class="col-sm-9 col-lg-7 controls">
                                @Html.TextAreaFor(m => m.Address, new { @class = "form-control" })
                            </div>
                        </div>
                        <button id="open" type="button" class="btn btn-warning"> Upload</button>
                        @*<input type="file" id="upload" value="Choose a file" accept="image/*" />*@
                        <div id="myModal" class="modal fade" role="dialog">
                            <div class="modal-dialog">

                                <!-- Modal content-->
                                <div class="modal-content">
                                    <div class="modal-body">
                                        <div class="demo-wrap upload-demo">
                                            <div class="container">
                                                <div class="grid">
                                                    <div class="col-md-2">
                                                        <div class="actions">

                                                            <input type="file" id="upload" style="visibility: hidden;" value="Choose a file" accept="image/*" />

                                                            @*<button class="upload-result" type="button">Result</button>*@
                                                        </div>
                                                    </div>
                                                    <div class="col-md-4">
                                                        <div class="upload-msg">
                                                            Upload a file to start cropping
                                                        </div>
                                                        <div class="upload-demo-wrap">
                                                            <div id="upload-demo"></div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <input type="hidden" id="imagebase64" name="imagebase64">
                                        <button type="button" data-dismiss="modal" class="btn btn-primary upload-result">Crop Image </button>
                                    </div>
                                </div>

                            </div>
                        </div>

                        <div class="form-group last">
                            <div class="col-sm-9 col-sm-offset-3 col-lg-7 col-lg-offset-2">
                                <button id="btnadd" type="submit" class="btn btn-primary"><i class="fa fa-check"></i> Submit</button>
                                <a href="@Url.Action("TeacherRegistration", "Admin")" class="btn btn-inverse dropdown-toggle"><i class="fa fa-caret-left"></i> Back </a>
                            </div>
                        </div>


                    </div>
                </div>
            </div>
        </div>

    </div>

}

@section scripts
{
    <script src="~/js/croppie.min.js"></script>
    <script src="~/Student_assets/assets/js/sweet-alert/sweetalert.min.js"></script>
    <script src="~/js/exif.js"></script>
    <script>
        $('#open').on('click', function () {
            $('input[type=file]').click();
            $('#myModal').modal('show');
        });
        $('#upload').on('change', function () {
            debugger
            readFile(this);

        });
        function output(node) {
            var existing = $('#result .croppie-result');
            if (existing.length > 0) {
                existing[0].parentNode.replaceChild(node, existing[0]);
            }
            else {
                $('#result')[0].appendChild(node);
            }
        }

        function popupResult(result) {
            var html;
            if (result.html) {
                html = result.html;
            }
            if (result.src) {
                html = '<img src="' + result.src + '" />';

            }
            swal({
                title: '',
                html: true,
                text: html,
                allowOutsideClick: true
            });
            setTimeout(function () {
                $('.sweet-alert').css('margin', function () {
                    var top = -1 * ($(this).height() / 2),
                        left = -1 * ($(this).width() / 2);

                    return top + 'px 0 0 ' + left + 'px';
                });
            }, 1);
        }




        var $uploadCrop;
        function readFile(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    $('.upload-demo').addClass('ready');
                    $uploadCrop.croppie('bind', {
                        url: e.target.result
                    }).then(function () {
                        console.log('jQuery bind complete');
                    });
                }
                reader.readAsDataURL(input.files[0]);

            }
            else {
                swal("Sorry - you're browser doesn't support the FileReader API");
            }
        }

        $uploadCrop = $('#upload-demo').croppie({
            viewport: {
                width: 250,
                height: 150,
                type: 'square'
            },
            enableExif: true
        });


        $('.upload-result').on('click', function (ev) {
            debugger;
            $uploadCrop.croppie('result', {
                type: 'canvas',
                size: 'viewport'
            }).then(function (resp) {
                popupResult({
                    src: resp
                });
                $('#imagebase64').val(resp);
            });
        });

        function bindNavigation() {
            var $body = $('body');
            $('nav a').on('click', function (ev) {
                var lnk = $(ev.currentTarget),
                    href = lnk.attr('href'),
                    targetTop = $('a[name=' + href.substring(1) + ']').offset().top;

                $body.animate({ scrollTop: targetTop });
                ev.preventDefault();
            });
        }

        function init() {
            bindNavigation();
            demoVanilla();
            demoUpload();
        }



        // Full version of `log` that:
        //  * Prevents errors on console methods when no console present.
        //  * Exposes a global 'log' function that preserves line numbering and formatting.
        (function () {
            var method;
            var noop = function () { };
            var methods = [
                'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',
                'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',
                'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',
                'timeStamp', 'trace', 'warn'
            ];
            var length = methods.length;
            var console = (window.console = window.console || {});

            while (length--) {
                method = methods[length];

                // Only stub undefined methods.
                if (!console[method]) {
                    console[method] = noop;
                }
            }


            if (Function.prototype.bind) {
                window.log = Function.prototype.bind.call(console.log, console);
            }
            else {
                window.log = function () {
                    Function.prototype.apply.call(console.log, console, arguments);
                };
            }
        })();

    </script>
}